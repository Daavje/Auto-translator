import discord
from discord.ext import commands
from deep_translator import GoogleTranslator
import os
import logging
import re

# ------------------------------
# Logging
# ------------------------------
logging.basicConfig(level=logging.INFO,
                    format="[%(asctime)s] %(levelname)s:%(name)s: %(message)s")
log = logging.getLogger("franco-arabic-bot")

# ------------------------------
# Bot setup
# ------------------------------
intents = discord.Intents.default()
intents.message_content = True
intents.messages = True  # type: ignore[attr-defined]

bot = commands.Bot(command_prefix="!", intents=intents)

# Translator
translator = GoogleTranslator(source="auto", target="en")

# ------------------------------
# Franco-Arabic ‚Üí Arabic mapping
# ------------------------------
FRANCO_MAP = {
    "2": "ÿ°",
    "3": "ÿπ",
    "4": "ÿ¥",
    "5": "ÿÆ",
    "6": "ÿ∑",
    "7": "ÿ≠",
    "8": "ŸÇ",
    "9": "ÿµ",
    "a": "ÿß", "b": "ÿ®", "t": "ÿ™", "th": "ÿ´",
    "j": "ÿ¨", "h": "Ÿá", "kh": "ÿÆ", "d": "ÿØ",
    "dh": "ÿ∞", "r": "ÿ±", "z": "ÿ≤", "s": "ÿ≥",
    "sh": "ÿ¥", "·π£": "ÿµ", "·∏ç": "ÿ∂", "·π≠": "ÿ∑",
    "·∫ì": "ÿ∏", " ø": "ÿπ", "gh": "ÿ∫", "f": "ŸÅ",
    "q": "ŸÇ", "k": "ŸÉ", "l": "ŸÑ", "m": "ŸÖ",
    "n": "ŸÜ", "w": "Ÿà", "y": "Ÿä",
}

def franco_to_arabic(text: str) -> str:
    """Convert simple Franco-Arabic to Arabic letters."""
    # eerst 2-char combinaties
    for combo in ['sh','kh','gh','th','dh']:
        text = text.replace(combo, FRANCO_MAP.get(combo, combo))
    # vervang individuele letters/nummers
    for k, v in FRANCO_MAP.items():
        text = text.replace(k, v)
    return text

# ------------------------------
# Helper functions
# ------------------------------
_normalize_re = re.compile(r"[\W_]+", re.UNICODE)

def normalize_text(s: str) -> str:
    return _normalize_re.sub(" ", s).strip().lower()

def should_send_translation(original: str, translated: str) -> bool:
    return normalize_text(original) != normalize_text(translated)

async def translate_text(text: str) -> str:
    try:
        arabic_text = franco_to_arabic(text)
        return translator.translate(arabic_text)
    except Exception as e:
        log.warning("Translation failed: %s", e)
        return text  # fallback

# ------------------------------
# Events
# ------------------------------
@bot.event
async def on_ready():
    log.info("‚úÖ Logged in als %s (id=%s)", bot.user, getattr(bot.user, "id", "?"))

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot:
        return

    translation = await translate_text(message.content)
    if should_send_translation(message.content, translation):
        try:
            await message.channel.send(f"üåê Translation: {translation}")
        except discord.HTTPException as e:
            log.error("Failed to send translation: %s", e)

    await bot.process_commands(message)

# ------------------------------
# Commands
# ------------------------------
@bot.command(name="translate", help="Translate provided text to English.")
async def translate_command(ctx: commands.Context, *, text: str):
    translation = await translate_text(text)
    if should_send_translation(text, translation):
        await ctx.send(f"üåê Translation: {translation}")
    else:
        await ctx.send("‚ÑπÔ∏è That already looks like English.")

# ------------------------------
# Run bot
# ------------------------------
token = os.getenv("DISCORD_BOT_TOKEN", "JOUW_DISCORD_BOT_TOKEN_HIER")
bot.run(token)
